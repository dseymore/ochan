<web-app xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_5.xsd" metadata-complete="false" version="2.5">

	<!-- Define Velocity template compiler -->
	<servlet version="2.5">
		<servlet-name>velocity</servlet-name>
		<servlet-class>org.apache.velocity.tools.view.servlet.VelocityViewServlet</servlet-class>

		<!-- 
			Unless you plan to put your toolbox.xml and velocity.properties
			under different folders or give them different names, then these
			two init-params are unnecessary as of VelocityTools 1.3.  The
			VelocityViewServlet will automatically look for these files in
			the following locations.
			
			Leaving this note here for my own use
		-->
<!--		<init-param>-->
<!--			<param-name>org.apache.velocity.toolbox</param-name>-->
<!--			<param-value>/WEB-INF/toolbox.xml</param-value>-->
<!--		</init-param>-->
<!--		<init-param>-->
<!--			<param-name>org.apache.velocity.properties</param-name>-->
<!--			<param-value>/WEB-INF/velocity.properties</param-value>-->
<!--		</init-param>-->
	</servlet>
	
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>/WEB-INF/log4j.xml</param-value>
	</context-param>
	
	<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>
	
	<!--  CXF STUFF  -->
	
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/cxf-beans.xml</param-value>
	</context-param>

	<listener>
		<listener-class>
			org.springframework.web.context.ContextLoaderListener
		</listener-class>
	</listener>
	
	<listener>
		<listener-class>
			org.ochan.util.UserCounter
		</listener-class>
	</listener>
	
	<listener>
		<listener-class>
			org.ochan.util.GoogleAnalyticsDeploymentListener
		</listener-class>
	</listener>

<!--	<servlet>-->
<!--		<servlet-name>dummy</servlet-name>-->
<!--		<servlet-class>org.springframework.web.context.ContextLoaderServlet</servlet-class>-->
<!--		<load-on-startup>1</load-on-startup>-->
<!--	</servlet>-->
	
	<servlet>
		<servlet-name>CXFServlet</servlet-name>
		<display-name>CXF Servlet</display-name>
		<servlet-class>org.apache.cxf.transport.servlet.CXFServlet</servlet-class>
		<load-on-startup>10</load-on-startup>
	</servlet>

	<servlet-mapping>
		<servlet-name>CXFServlet</servlet-name>
		<url-pattern>/remote/*</url-pattern>
	</servlet-mapping>

	<!-- Map *.vm files to Velocity -->
	<servlet-mapping>
		<servlet-name>velocity</servlet-name>
		<url-pattern>*.vm</url-pattern>
	</servlet-mapping>

	<servlet>
		<servlet-name>Ochan</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
	</servlet>
	<servlet-mapping>
<!--		  this will automatically find Ochan-servlet.xml -->
		<servlet-name>Ochan</servlet-name>
		<url-pattern>*.Ochan</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>Ochan</servlet-name>
		<url-pattern>/chan/*</url-pattern>
	</servlet-mapping>
	<filter>
    	<filter-name>PathParameterFilter</filter-name>
    	<filter-class>carbonfive.spring.web.pathparameter.ParameterizedPathFilter</filter-class>
  	</filter>
	<filter-mapping>
    	<filter-name>PathParameterFilter</filter-name>
    	<url-pattern>/chan/*</url-pattern>
  	</filter-mapping>
	
	
	<!-- so that the welcome calls the servlet -->
	<servlet-mapping>
		<servlet-name>Ochan</servlet-name>
		<url-pattern>categoryList.Ochan</url-pattern>
	</servlet-mapping>
	<!--  the share endpoint -->
	<servlet-mapping>
		<servlet-name>Ochan</servlet-name>
		<url-pattern>/share</url-pattern>
	</servlet-mapping>

<!--	  Spring Context! -->
<!--	<listener>-->
<!--		<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>-->
<!--	</listener> -->

	<welcome-file-list>
		<welcome-file>/categoryList.Ochan</welcome-file>
	</welcome-file-list>

    <!--  Log4J JMX initialization -->
    <listener>
            <listener-class>
                    org.ochan.util.LoggingConfiguration
            </listener-class>
    </listener>
    
    <!--  ATOM FEEDS via Abdera! -->
    <servlet id="abdera">
		<servlet-name>Abdera</servlet-name>  
    	<servlet-class>org.apache.abdera.spring.SpringAbderaServlet</servlet-class>
  	</servlet>
	<servlet-mapping id="abdera-mapping">
		<servlet-name>Abdera</servlet-name>
    	<url-pattern>/atom/*</url-pattern>
	</servlet-mapping>

	<filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    
    <filter>
    	<filter-name>loggingFilter</filter-name>
    	<filter-class>org.springframework.web.filter.CommonsRequestLoggingFilter</filter-class>
    </filter>

    <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
	<filter-mapping>
        <filter-name>loggingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
	
	<error-page>
		<error-code>404</error-code>
		<location>/chan/error/404</location>
	</error-page>
	<error-page>
		<error-code>500</error-code>
		<location>/chan/error/500</location>
	</error-page>

</web-app>
